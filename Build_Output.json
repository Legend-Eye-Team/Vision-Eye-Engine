[
    {
        "Name": "Display.py",
        "Content": "DISPLAY_INFO = {\n    \"Module\":\"Display\",\n    \"Coder\":[\"QuangDeNhi\"]\n}\n\nimport pygame\nfrom. import Setting\nfrom. import Event\n\nclass Display:\n    pygame.init()\n    def __init__(self,width,height,caption) -> None:\n        self._ = pygame.display.set_mode((width,height))\n        pygame.display.set_caption(caption)\n        self.width = width\n        self.height = height\n        self.caption = caption\n\n        self.Enable = True\n\n        self.Clock = pygame.time.Clock()\n\n        self.Graphics = []\n        self.EventControl = Event.Event_Controller()\n\n        self.setting = Setting.Setting()\n\n    \n    def FillDisplay(self,r,g,b):\n        self._.fill((r,g,b))\n\n    def Input(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.Exit()\n        self.EventControl.Update()\n    \n    def Render(self):\n        if self.Enable == False: pygame.quit();return\n        for graphic in self.Graphics:\n            graphic.Render()\n        pygame.display.update()\n\n    def Exit(self):\n        self.Enable = False\n\n    def Update(self):\n        self.Clock.tick(self.setting.fps)\n        for graphic in self.Graphics:\n            graphic.Update()\n        "
    },
    {
        "Name": "Event.py",
        "Content": "import pygame\n\nclass Event_Controller:\n    def __init__(self) -> None:\n        self.Mouse = Mouse()\n        self.Keyboard = Keyboard()\n    \n    def Update(self):\n        self.Mouse.Update()\n        self.Keyboard.Update()\n\nclass Mouse:\n    def __init__(self) -> None:\n        self.x = self.y = 0\n        self.IsClick = []\n\n    def Update(self):\n        self.x,self.y = pygame.mouse.get_pos()\n        self.IsClick = pygame.mouse.get_pressed()\n    \n    def LeftClick(self):\n        return self.IsClick[0]\n    \n    def MidClick(self):\n        return self.IsClick[1]\n    \n    def RightClick(self):\n        return self.IsClick[2]\n\nclass Keyboard:\n    def __init__(self) -> None:\n        self.key_pressing = []\n\n    def Update(self):\n        self.key_pressing = pygame.key.get_pressed()\n\n    def IsPress(self,key):\n        return self.key_pressing[key]"
    },
    {
        "Name": "Functional.py",
        "Content": "import threading\nimport time\n\ndef ConvertBoolean(value):\n    return not value\n\ndef WaitThread(wait_time,todo,exit_do=None):\n    \n    def f(wt):\n        time.sleep(wt)\n        todo()\n    thread = threading.Thread(target=f,args=(wait_time,))\n    thread.start()\n    if exit_do != None: exit_do()"
    },
    {
        "Name": "Graphic.py",
        "Content": "import pygame\n\nTOP_COLLIED = 501\nBOTTOM_COLLIED = 502\nLEFT_COLLIED = 503\nRIGHT_COLLIED = 504\nNONE_COLLIED = 500\n\n\nstart_id = 0\ndef CreateID():\n    global start_id\n    start_id += 1\n    return start_id - 1\n\nclass Graphic:\n    def __init__(self,display,x,y) -> None:\n        self.id = CreateID()\n        self.x = x\n        self.y = y\n        self.display = display\n        self.display.Graphics.append(self)\n\n        self.Lock = False\n        self.canCollied = True\n\n    def Destroy(self):\n        self = None\n\nclass Rectangle(Graphic):\n    def __init__(self, display, x, y,width,height) -> None:\n        super().__init__(display, x, y)\n        self.width = width\n        self.height = height\n        self.color = (200,200,200)\n        self.Attribute = {\n            \"IsFlat\":False,\n            \"IsImage\":False\n        }\n        self.setting = self.display.setting\n\n    def SetAttribute(self, name, value):\n        self.Attribute[name] = value\n        self.UpdateOnce()\n\n    def Transform(self,new_width,new_height):\n        self.width = new_width\n        self.height = new_height\n\n    def GetCollied(self,graphic,max_speed):\n        if graphic.canCollied == True:\n\n            local_rect = pygame.Rect(self.x,self.y,self.width,self.height)\n            other_rect = pygame.Rect(graphic.x,graphic.y,graphic.width,graphic.height)\n\n            if local_rect.colliderect(other_rect):\n                if abs(other_rect.top - local_rect.bottom) < max_speed*2 :\n                    return (TOP_COLLIED,other_rect.top)\n                if abs(other_rect.bottom - local_rect.top) < max_speed*2 :\n                    return (BOTTOM_COLLIED, other_rect.top)\n                if abs(other_rect.right - local_rect.left) < max_speed*2 :\n                    return (RIGHT_COLLIED, other_rect.left)\n                if abs(other_rect.left - local_rect.right) < max_speed*2 :\n                    return (LEFT_COLLIED, other_rect.right)\n            return (NONE_COLLIED,None)\n\n    def GravityUpdate(self):\n        if self.Lock == False:\n            self.y += self.setting.gravity\n\n    def Update(self):\n        self.GravityUpdate()\n        for graphic in self.display.Graphics:\n            if self.Lock == False:\n                a = self.GetCollied(graphic,self.display.setting.gravity)\n                if a == None: continue\n                if a[0] == TOP_COLLIED:\n                    self.y = a[1] - self.height\n\n    def UpdateOnce(self):\n        if self.Attribute[\"IsFlat\"] == True:\n            self.Transform(self.display._.get_width(),100)\n            self.x = 0\n            self.y = self.display._.get_height()\n            self.Lock = True\n\n    def Render(self):\n        local_rect = pygame.Rect(self.x,self.y,self.width,self.height)\n        pygame.draw.rect(self.display._,self.color,local_rect)\n    \n    "
    },
    {
        "Name": "Gui.py",
        "Content": "import pygame\nclass Text:\n    def __init__(self,display,font,size,text) -> None:\n        self.font = pygame.font.Font(font,size)\n        self.content = text\n        self.color_text = (255,255,255)\n        self.text = self.font.render(self.content,True,self.color_text)\n        self.textRect = self.text.get_rect()\n        self.display = display\n        self.display.Graphics.append(self)\n\n        self.canCollied = False\n\n    def Destroy(self):\n        self = None\n\n    def Render(self):\n        self.display._.blit(self.text,self.textRect)\n    \n    def Update(self):\n        self.text = self.font.render(self.content,True,self.color_text)"
    },
    {
        "Name": "Human.py",
        "Content": "from . import Functional\nfrom . import Rectangle\nimport threading,time\n\nTOP_COLLIED = 501\nBOTTOM_COLLIED = 502\nLEFT_COLLIED = 503\nRIGHT_COLLIED = 504\nNONE_COLLIED = 500\n\nclass Human():\n    def __init__(self,Rectangle) -> None:\n        self.Rectangle = Rectangle\n        self.Health = 100\n        self.Max_health = 100\n\n        self.Jump_power = 120\n        self._CanJump = True\n        self._countdownJump = .7\n\n    def MoveTo(self,x,y=None):\n        prev_x = self.Rectangle.x \n        prev_x += x\n        if y != None: self.Rectangle.y = y\n        \n        for graphic in self.Rectangle.display.Graphics:\n            a = self.Rectangle.GetCollied(graphic,abs(x))\n            if a == None: continue\n            elif a[0] == LEFT_COLLIED and x > 0:\n                if graphic.Lock == True: return\n                elif graphic.Lock == False:\n                    graphic.x += x / 2\n                    prev_x = x / 2\n                    return\n\n            elif a[0] == RIGHT_COLLIED and x < 0:\n                if graphic.Lock == True: return\n                elif graphic.Lock == False:\n                    graphic.x += x / 2\n                    prev_x = x / 2\n                    return\n\n        \n        self.Rectangle.x = prev_x\n\n\n    def _Jump(self,f):\n        self._CanJump = False\n        self.Rectangle.Lock= True\n        for i in  range(0,5):\n            self.Rectangle.y -= self.Jump_power / 5\n            time.sleep(.02)\n        self.Rectangle.Lock= False\n\n    def JumpActive(self):\n        if self._CanJump == True:\n            f =threading.Thread(target=self._Jump,args=(1,))\n            f.start()\n            def convert(): self._CanJump = True\n            Functional.WaitThread(self._countdownJump,convert)\n"
    },
    {
        "Name": "Image.py",
        "Content": "import pygame\nfrom . import Rectangle\n\nclass Image(Rectangle):\n    def __init__(self, display, x, y,source) -> None:\n        self.image = pygame.image.load(source).convert()\n        self.width = self.image.get_width()\n        self.height = self.image.get_height()\n        super().__init__(display, x, y,self.width,self.height)\n        self.SetAttribute(\"IsImage\",True)\n    def Render(self):\n        self.display._.blit(self.image,(self.x,self.y))\n    \n    def Transform(self,new_width,new_height):\n        self.image = pygame.transform.scale(self.image,(new_width,new_height))\n        self.UpdateImage()\n    \n    def UpdateImage(self):\n        self.width = self.image.get_width()\n        self.height = self.image.get_height()\n"
    },
    {
        "Name": "Setting.py",
        "Content": "class Setting:\n    def __init__(self) -> None:\n        self.gravity = 3\n        self.fps = 60\n        "
    },
    {
        "Name": "__init__.py",
        "Content": "from .Display import *\nfrom .Graphic import *\nfrom . import Image\nfrom . import Gui\nfrom . import Human\n\ndef HelloWorld():\n    print(\"\"\"            ---\nThank You For Using Engine\"\"\")\n\nHelloWorld()\n\nDISPLAY_WIDTH = 500\nDISPLAY_HEIGHT = 500\nDISPLAY_CAPTION = \"Engine Vision Eye\"\n"
    }
]